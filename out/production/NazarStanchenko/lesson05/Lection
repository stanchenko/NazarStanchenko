Type casting is when you assign a value of one primitive data type to another type.

In Java, there are two types of casting:

Widening Casting (automatically) - converting a smaller type to a larger type size
byte -> short -> char -> int -> long -> float -> double




Narrowing Casting (manually) - converting a larger type to a smaller size type
double -> float -> long -> int -> char -> short -> byte

Listing 1
public class Main {
  public static void main(String[] args) {
    double myDouble = 9.78d;
    int myInt = (int) myDouble; // Explicit casting: double to int

    System.out.println(myDouble);
    System.out.println(myInt);
  }
}
Первый момент
Если переменная имеет static   модификатор она оглашается не для объекта а для класса
если модификатора нет то она оглашается для обхекта
Второй момент
если метод статический он связанн с классом а не с объектом
все что связанно со статиком оно связанно с классом
и для того чтобы вызвать переменную нам не надо создавать ОБЪЕКТ КЛАССА

нон статик создается заново для каждого класса
не статическая будит по новой создаваться для каждого нового объекта
вот почему статическую переменную можно вызвать через класс а не статическую только через объект

минус в том что статические переменны доступны за границами класса и есть не такими защищенными как можно сделать
приватную
не возможно сделать private static int meStatic =10;

также статическими могут быть методы
статический метод вызывается без создания объектов
статические методы не возможно переопределить

// статические методы не возможно переназначить
статические методы привязаны к классу, не можем из переназначать потому что бы его переназначить надо работать с объектом
а мы знаем что татическме методы и переменны создаются для классов
ИТОГ ПО МОДИФИКАТОРАМ
модификатор статик используется если нам необходимо иметь доступ к переменной или методу без создания объекта
когда нам нужно создать переменную которая будит доступна для всех экземпляров и еще при задании констант добавляется модификатор final
public static final int n = 25;
модификатором final можно запретить наследование класса